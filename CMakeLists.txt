cmake_minimum_required(VERSION 3.16)

if(NOT CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE
        "${CMAKE_CURRENT_SOURCE_DIR}/build/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake"
    )
endif()

set(ZSTD_WASM_PROJECT_NAME "zstd-wasm")

# Extract the project version from package.json
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/package.json")
    file(READ "${CMAKE_CURRENT_SOURCE_DIR}/package.json" ZSTD_FFI_JS_PACKAGE_JSON_CONTENT)
else()
    message(FATAL_ERROR "`package.json` not found in ${CMAKE_CURRENT_SOURCE_DIR}")
endif()
if("${ZSTD_FFI_JS_PACKAGE_JSON_CONTENT}" MATCHES "\"version\":[ ]*\"([^\"]+)\"")
    set(ZSTD_WASM_VERSION "${CMAKE_MATCH_1}")
else()
    set(ZSTD_WASM_VERSION "0.0.0")
endif()

project(
    "${ZSTD_WASM_PROJECT_NAME}"
    LANGUAGES
        C
    VERSION "${ZSTD_WASM_VERSION}"
)

if(${ZSTD_WASM_PROJECT_NAME}_IS_TOP_LEVEL)
    # Include dependency settings if the project isn't being included as a subproject.
    # NOTE: We mark the file optional because if the user happens to set the necessary dependency
    # location variables, this file is not necessary.
    include("build/deps/cmake-settings/settings.cmake" OPTIONAL)
endif()

# Set the default build type to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(ZSTD_WASM_DEFAULT_BUILD_TYPE "Release")
    message(STATUS "No build type specified. Setting to '${ZSTD_WASM_DEFAULT_BUILD_TYPE}'.")
    set(CMAKE_BUILD_TYPE
        "${ZSTD_WASM_DEFAULT_BUILD_TYPE}"
        CACHE STRING
        "Choose the type of build."
        FORCE
    )
endif()

set(CMAKE_EXECUTABLE_SUFFIX ".js" CACHE STRING "Binary type to be generated by Emscripten.")

# Set up common compile and link options to be merged with other options as necessary.
set(ZSTD_WASM_COMMON_COMPILE_OPTIONS
    -fwasm-exceptions
)
set(ZSTD_WASM_EXPORTED_FUNCTIONS
        "_free"
        "_malloc"
        "_ZSTD_createDCtx"
        "_ZSTD_decompress"
        "_ZSTD_decompressStream"
        "_ZSTD_DStreamInSize"
        "_ZSTD_DStreamOutSize"
        "_ZSTD_findDecompressedSize"
        "_ZSTD_freeDCtx"
        "_ZSTD_isError"
        "_ZSTD_getErrorName"
)
string(JOIN "," ZSTD_WASM_EXPORTED_FUNCTIONS_STR
        ${ZSTD_WASM_EXPORTED_FUNCTIONS}
)
set(ZSTD_WASM_COMMON_LINK_OPTIONS
    -fwasm-exceptions
    -sALLOW_MEMORY_GROWTH
    -sEXPORT_ES6
    -sEXPORTED_RUNTIME_METHODS=["HEAPU8","UTF8ToString"]
    -sMAXIMUM_MEMORY=4GB
    -sMODULARIZE
    -sEXPORTED_FUNCTIONS=[${ZSTD_WASM_EXPORTED_FUNCTIONS_STR}]
)

if(CMAKE_BUILD_TYPE MATCHES "Release")
    list(APPEND ZSTD_WASM_COMMON_COMPILE_OPTIONS
        -flto
    )
    list(APPEND ZSTD_WASM_COMMON_LINK_OPTIONS
        -flto
        --closure=1
    )
endif()

set(ZSTD_WASM_SRC_ZSTD
    ${ZSTD_WASM_ZSTD_SINGLE_FILE_SOURCE_DIRECTORY}/zstd.c
)

set(ZSTD_WASM_SUPPORTED_ENVIRONMENTS
    node
    worker
    CACHE INTERNAL
    "List of supported environments."
)

foreach(env ${ZSTD_WASM_SUPPORTED_ENVIRONMENTS})
    set(ZSTD_WASM_BIN_NAME "zstd-wasm-${env}")
    add_executable(${ZSTD_WASM_BIN_NAME})

    # Set up compile options
    target_compile_features(${ZSTD_WASM_BIN_NAME} PRIVATE c_std_17)
    target_compile_options(${ZSTD_WASM_BIN_NAME} PRIVATE ${ZSTD_WASM_COMMON_COMPILE_OPTIONS})

    # Set up link options
    set(ZSTD_WASM_LINK_OPTIONS
        ${ZSTD_WASM_COMMON_LINK_OPTIONS}
        --emit-tsd=${ZSTD_WASM_BIN_NAME}.d.ts
        -sENVIRONMENT=${env}
    )
    target_link_options(
        ${ZSTD_WASM_BIN_NAME}
        PRIVATE
        ${ZSTD_WASM_LINK_OPTIONS}
    )

    message(
            "ZSTD_WASM_BIN_NAME=\"${ZSTD_WASM_BIN_NAME}\". \
CMAKE_BUILD_TYPE=\"${CMAKE_BUILD_TYPE}\". \
Compile options: ${ZSTD_WASM_COMMON_COMPILE_OPTIONS}. \
Link options: ${ZSTD_WASM_LINK_OPTIONS}."
    )

    target_sources(
        ${ZSTD_WASM_BIN_NAME}
        PRIVATE
        ${ZSTD_WASM_SRC_ZSTD}
    )
endforeach()
